#include "pixelmasker.h"

void PixelMasker::buildEvent(Event &event, map<int, Event>&, TbConfig &config) {

	for (vector<PllHit*>::iterator it = event.rawHits.begin();
			it != event.rawHits.end(); it++) {

		const DUT* dut = config.getDut((*it)->iden);
		//Extract lv1 configuration from config
		int lv1Min = dut->lv1Min;
		int lv1Max = dut->lv1Max;
		TBALOG(kDEBUG3) << "Cuts from DUT calib: " << lv1Min << " < lv1 < "
				<< lv1Max << endl;
		int col((*it)->col), row((*it)->row);
		int lv1((*it)->lv1);
		bool masked = false;
		// filter hits with lvl1 out of range
		if (lv1 > lv1Max || lv1 < lv1Min)
			continue;
		for (vector<pair<int, int> >::iterator mm = event.dut->masks.begin();
				mm != event.dut->masks.end(); mm++) {

			if ((*mm).first == row and (*mm).second == col) {
				masked = true;
				break;
			}
		}
		if (not masked) {
			event.hits.push_back((*it));
		}
	}
}

